import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import pickle
import json
import os
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# Import c√°c h√†m ti·ªán √≠ch
from data_utils import load_data, add_technical_indicators
from model_utils import preprocess_data, build_model, train_model, evaluate_model

# Import c√°c th∆∞ vi·ªán ML c·∫ßn thi·∫øt cho app.py
from tensorflow.keras.models import load_model as keras_load_model
from tensorflow.keras.callbacks import EarlyStopping
import tensorflow as tf
from predict_future import predict_future
from arima_model import (
    prepare_data_for_arima, train_arima_model, predict_arima, 
    evaluate_arima_model, compare_models_performance, check_stationarity
)

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="VNIndex Stock Prediction Dashboard",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS t√πy ch·ªânh - Thi·∫øt k·∫ø chuy√™n nghi·ªáp theo phong c√°ch Investing.com
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    
    /* Reset v√† base styling */
    .stApp {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        background-color: #f8fafc;
    }
    
    /* Header ch√≠nh - Investing.com style */
    .main-header {
        font-size: 2.8rem;
        font-weight: 700;
        color: #1a365d;
        text-align: center;
        margin-bottom: 2.5rem;
        background: linear-gradient(135deg, #2d3748 0%, #1a365d 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        letter-spacing: -0.5px;
    }
    
    /* Navigation v√† Tabs - Professional top navigation */
    .stTabs [data-baseweb="tab-list"] {
        gap: 0;
        background: linear-gradient(135deg, #ffffff 0%, #f7fafc 100%);
        border-radius: 16px;
        padding: 6px;
        box-shadow: 0 4px 16px rgba(0,0,0,0.08);
        margin-bottom: 32px;
        border: 1px solid #e2e8f0;
        overflow-x: auto;
        overflow-y: hidden;
        white-space: nowrap;
        -webkit-overflow-scrolling: touch;
    }
    
    .stTabs [data-baseweb="tab"] {
        height: 56px;
        padding: 0 28px;
        border-radius: 12px;
        background-color: transparent;
        color: #4a5568;
        font-weight: 500;
        font-size: 15px;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        border: none;
        margin: 2px;
        position: relative;
        overflow: hidden;
        flex-shrink: 0;
        min-width: fit-content;
    }
    
    .stTabs [data-baseweb="tab"]::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(45, 55, 72, 0.1), transparent);
        transition: left 0.5s;
    }
    
    .stTabs [data-baseweb="tab"]:hover::before {
        left: 100%;
    }
    
    .stTabs [data-baseweb="tab"]:hover {
        background: linear-gradient(135deg, #e2e8f0 0%, #f7fafc 100%);
        color: #2d3748;
        transform: translateY(-1px);
    }
    
    .stTabs [data-baseweb="tab"][aria-selected="true"] {
        background: linear-gradient(135deg, #2d3748 0%, #4a5568 100%);
        color: white;
        box-shadow: 0 4px 16px rgba(45, 55, 72, 0.3);
        transform: translateY(-1px);
    }
    
    /* Cards v√† Widgets - Investing.com style */
    .metric-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
        border: 1px solid #e2e8f0;
        border-radius: 20px;
        padding: 28px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.06);
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
        backdrop-filter: blur(10px);
    }
    
    .metric-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #38a169 0%, #48bb78 50%, #68d391 100%);
    }
    
    .metric-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 16px 48px rgba(0, 0, 0, 0.12);
        border-color: #cbd5e0;
    }
    
    .metric-value {
        font-size: 2.5rem;
        font-weight: 700;
        color: #2d3748;
        margin-bottom: 8px;
        line-height: 1.1;
    }
    
    .metric-label {
        font-size: 0.85rem;
        color: #718096;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.8px;
        margin-bottom: 4px;
    }
    
    .metric-change-positive {
        color: #38a169;
        font-weight: 700;
        font-size: 1.1rem;
    }
    
    .metric-change-negative {
        color: #e53e3e;
        font-weight: 700;
        font-size: 1.1rem;
    }
    
    .metric-sublabel {
        font-size: 0.75rem;
        color: #a0aec0;
        font-weight: 400;
        margin-top: 4px;
    }
    
    /* Sidebar styling - Dark professional theme */
    .css-1d391kg {
        background: linear-gradient(180deg, #1a202c 0%, #2d3748 100%);
        color: white;
        border-right: 1px solid #4a5568;
    }
    
    .css-1d391kg .stSelectbox label,
    .css-1d391kg .stFileUploader label,
    .css-1d391kg .stMarkdown {
        color: #e2e8f0;
        font-weight: 500;
    }
    
    .css-1d391kg .stSelectbox > div > div {
        background-color: #2d3748;
        border-color: #4a5568;
        color: white;
    }
    
    /* Buttons - Professional financial platform style */
    .stButton > button {
        background: linear-gradient(135deg, #2d3748 0%, #4a5568 100%);
        color: white;
        border: none;
        border-radius: 16px;
        padding: 16px 32px;
        font-weight: 600;
        font-size: 14px;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 6px 20px rgba(45, 55, 72, 0.25);
        text-transform: uppercase;
        letter-spacing: 0.8px;
        position: relative;
        overflow: hidden;
    }
    
    .stButton > button::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s;
    }
    
    .stButton > button:hover::before {
        left: 100%;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 32px rgba(45, 55, 72, 0.35);
        background: linear-gradient(135deg, #4a5568 0%, #2d3748 100%);
    }
    
    .stButton > button:active {
        transform: translateY(0);
    }
    
    /* Primary buttons - Investing.com blue */
    div[data-testid="stButton"] button[kind="primary"] {
        background: linear-gradient(135deg, #3182ce 0%, #2c5aa0 100%);
        box-shadow: 0 6px 20px rgba(49, 130, 206, 0.25);
    }
    
    div[data-testid="stButton"] button[kind="primary"]:hover {
        background: linear-gradient(135deg, #2c5aa0 0%, #3182ce 100%);
        box-shadow: 0 8px 32px rgba(49, 130, 206, 0.35);
    }
    
    /* Success buttons */
    .success-btn {
        background: linear-gradient(135deg, #38a169 0%, #48bb78 100%) !important;
        box-shadow: 0 6px 20px rgba(56, 161, 105, 0.25) !important;
    }
    
    /* Form elements - Clean professional styling */
    .stSelectbox > div > div,
    .stSlider > div > div,
    .stNumberInput > div > div,
    .stDateInput > div > div,
    .stMultiSelect > div > div {
        border-radius: 12px;
        border: 2px solid #e2e8f0;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        background-color: #ffffff;
    }
    
    .stSelectbox > div > div:focus-within,
    .stSlider > div > div:focus-within,
    .stNumberInput > div > div:focus-within,
    .stDateInput > div > div:focus-within,
    .stMultiSelect > div > div:focus-within {
        border-color: #3182ce;
        box-shadow: 0 0 0 4px rgba(49, 130, 206, 0.1);
        transform: translateY(-1px);
    }
    
    /* Alerts v√† Messages - Enhanced visual hierarchy */
    .stAlert {
        border-radius: 16px;
        border-left-width: 6px;
        font-weight: 500;
        padding: 20px;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05);
    }
    
    .stAlert[data-baseweb="notification"][kind="info"] {
        background: linear-gradient(135deg, #ebf8ff 0%, #bee3f8 100%);
        border-left-color: #3182ce;
        color: #2c5aa0;
    }
    
    .stAlert[data-baseweb="notification"][kind="success"] {
        background: linear-gradient(135deg, #f0fff4 0%, #c6f6d5 100%);
        border-left-color: #38a169;
        color: #276749;
    }
    
    .stAlert[data-baseweb="notification"][kind="warning"] {
        background: linear-gradient(135deg, #fffaf0 0%, #fbd38d 100%);
        border-left-color: #d69e2e;
        color: #b7791f;
    }
    
    .stAlert[data-baseweb="notification"][kind="error"] {
        background: linear-gradient(135deg, #fff5f5 0%, #fed7d7 100%);
        border-left-color: #e53e3e;
        color: #c53030;
    }
    
    /* Section headers - Professional typography */
    .section-header {
        font-size: 1.75rem;
        font-weight: 700;
        color: #2d3748;
        margin-bottom: 24px;
        padding-bottom: 12px;
        border-bottom: 3px solid #e2e8f0;
        position: relative;
    }
    
    .section-header::after {
        content: '';
        position: absolute;
        bottom: -3px;
        left: 0;
        width: 60px;
        height: 3px;
        background: linear-gradient(90deg, #3182ce 0%, #63b3ed 100%);
    }
    
    /* Progress bars */
    .stProgress > div > div {
        background: linear-gradient(90deg, #3182ce 0%, #63b3ed 100%);
        border-radius: 12px;
        height: 12px;
    }
    
    /* DataFrames - Clean table styling */
    .stDataFrame {
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
        border: 1px solid #e2e8f0;
    }
    
    /* Plotly charts container */
    .js-plotly-plot {
        border-radius: 16px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.06);
        overflow: hidden;
        border: 1px solid #e2e8f0;
        margin: 0 auto;
        max-width: 100%;
    }
    
    /* Plotly chart responsive adjustments */
    .stPlotlyChart {
        width: 100% !important;
        margin: 0 auto;
        padding: 0 10px;
    }
    
    .stPlotlyChart > div {
        width: 100% !important;
        margin: 0 auto;
    }
    
    /* Metrics styling - Investing.com inspired */
    .stMetric {
        background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
        border: 1px solid #e2e8f0;
        border-radius: 16px;
        padding: 20px;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
    }
    
    .stMetric:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }
    
    /* File uploader styling */
    .stFileUploader {
        border: 2px dashed #cbd5e0;
        border-radius: 16px;
        padding: 32px;
        text-align: center;
        transition: all 0.3s ease;
        background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    }
    
    .stFileUploader:hover {
        border-color: #3182ce;
        background: linear-gradient(135deg, #ebf8ff 0%, #f8fafc 100%);
    }
    
    /* Footer */
    .footer {
        margin-top: 64px;
        padding: 32px 0;
        border-top: 2px solid #e2e8f0;
        text-align: center;
        color: #718096;
        font-size: 14px;
        background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
        font-weight: 500;
    }
    
    /* Loading states */
    @keyframes shimmer {
        0% { background-position: -200px 0; }
        100% { background-position: calc(200px + 100%) 0; }
    }
    
    .loading {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200px 100%;
        animation: shimmer 1.5s infinite;
    }
    
    /* Responsive design */
    @media (max-width: 768px) {
        .main-header {
            font-size: 2.2rem;
        }
        
        .metric-card {
            padding: 20px;
        }
        
        .stTabs [data-baseweb="tab-list"] {
            flex-wrap: wrap;
            gap: 4px;
            padding: 8px;
        }
        
        .stTabs [data-baseweb="tab"] {
            padding: 0 12px;
            font-size: 12px;
            height: 44px;
            min-width: auto;
            flex: 1;
            text-align: center;
        }
        
        .metric-value {
            font-size: 2rem;
        }
    }
    
    /* Extra small screens (phones) */
    @media (max-width: 480px) {
        .main-header {
            font-size: 1.8rem;
            text-align: center;
            margin-bottom: 16px;
        }
        
        .stTabs [data-baseweb="tab-list"] {
            flex-direction: column;
            gap: 6px;
            padding: 12px;
        }
        
        .stTabs [data-baseweb="tab"] {
            width: 100%;
            padding: 12px 16px;
            font-size: 14px;
            height: 48px;
            margin: 2px 0;
            text-align: center;
            border-radius: 8px;
        }
        
        .metric-card {
            padding: 16px;
            margin: 12px 0;
        }
        
        .metric-value {
            font-size: 1.8rem;
        }
        
        .metric-label {
            font-size: 0.8rem;
        }
    }
    
    /* Custom scrollbar - Professional styling */
    ::-webkit-scrollbar {
        width: 12px;
    }
    
    ::-webkit-scrollbar-track {
        background: #f1f5f9;
        border-radius: 6px;
    }
    
    ::-webkit-scrollbar-thumb {
        background: linear-gradient(180deg, #cbd5e0 0%, #a0aec0 100%);
        border-radius: 6px;
        border: 2px solid #f1f5f9;
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(180deg, #a0aec0 0%, #718096 100%);
    }
    
    /* Enhanced visual hierarchy */
    h1, h2, h3 {
        color: #2d3748;
        font-weight: 700;
        line-height: 1.2;
    }
    
    /* Market data styling - Financial platform look */
    .market-data-container {
        background: linear-gradient(135deg, #1a202c 0%, #2d3748 100%);
        border-radius: 20px;
        padding: 32px;
        color: white;
        box-shadow: 0 16px 48px rgba(0, 0, 0, 0.2);
        margin: 24px 0;
    }
    
    .market-data-item {
        border-bottom: 1px solid #4a5568;
        padding: 16px 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .market-data-item:last-child {
        border-bottom: none;
    }
    
    /* ·∫®n c√°c n√∫t Streamlit kh√¥ng c·∫ßn thi·∫øt */
    .stDeployButton {
        display: none;
    }
    
    button[data-testid="stToolbarActionButton"] {
        display: none;
    }
    
    div[data-testid="stToolbar"] {
        display: none;
    }
    
    /* ·∫®n menu hamburger v√† c√°c n√∫t g√≥c ph·∫£i */
    .stAppHeader {
        display: none;
    }
    
    header[data-testid="stHeader"] {
        display: none;
    }
    
    /* ·∫®n footer Streamlit */
    footer {
        display: none;
    }
    
    .streamlit-footer {
        display: none;
    }
</style>
""", unsafe_allow_html=True)

# Ti√™u ƒë·ªÅ ch√≠nh - Professional header
st.markdown("""
<div style="text-align: center; margin-bottom: 2rem;">
    <h1 class="main-header">VNIndex Stock Prediction Dashboard</h1>
    <p style="font-size: 1.2rem; color: #718096; font-weight: 500; margin-top: -1rem;">
        N·ªÅn t·∫£ng ph√¢n t√≠ch v√† d·ª± ƒëo√°n ch·ª©ng kho√°n b·∫±ng AI
    </p>
    <div style="width: 100px; height: 3px; background: linear-gradient(90deg, #3182ce 0%, #63b3ed 100%); margin: 1rem auto; border-radius: 2px;"></div>
</div>
""", unsafe_allow_html=True)

# Kh·ªüi t·∫°o session state
if 'data' not in st.session_state:
    st.session_state.data = None
if 'model' not in st.session_state:
    st.session_state.model = None
if 'scaler' not in st.session_state:
    st.session_state.scaler = None
if 'training_history' not in st.session_state:
    st.session_state.training_history = None
if 'model_metrics' not in st.session_state:
    st.session_state.model_metrics = None
if 'y_test_inv' not in st.session_state:
    st.session_state.y_test_inv = None
if 'y_pred_inv' not in st.session_state:
    st.session_state.y_pred_inv = None

# Sidebar - Professional data loading section
st.sidebar.markdown("""
<div style="text-align: center; margin-bottom: 2rem;">
    <h2 class="st-al" style="font-size: 1.5rem; font-weight: 700; margin-bottom: 0.5rem;">üìÅ Qu·∫£n l√Ω d·ªØ li·ªáu</h2>
    <div style="width: 60px; height: 2px; background: linear-gradient(90deg, #38a169 0%, #48bb78 100%); margin: 0 auto; border-radius: 1px;"></div>
</div>
""", unsafe_allow_html=True)

# Upload file ho·∫∑c s·ª≠ d·ª•ng file m·∫∑c ƒë·ªãnh
uploaded_file = st.sidebar.file_uploader(
    "üì§ T·∫£i l√™n file CSV", 
    type=['csv'],
    help="Ch·ªçn file CSV ch·ª©a d·ªØ li·ªáu ch·ª©ng kho√°n"
)

if uploaded_file is not None:
    st.session_state.data = load_data(uploaded_file)
else:
    # S·ª≠ d·ª•ng file m·∫∑c ƒë·ªãnh (ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi)
    default_file = os.path.join(os.path.dirname(__file__), "data/VNI_2020_2025_FINAL.csv")
    if os.path.exists(default_file):
        st.session_state.data = load_data(default_file)
        st.sidebar.success("‚úÖ ƒê√£ t·∫£i file d·ªØ li·ªáu m·∫∑c ƒë·ªãnh")
    else:
        st.sidebar.warning("‚ö†Ô∏è Vui l√≤ng t·∫£i l√™n file d·ªØ li·ªáu CSV")

# Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i
if st.session_state.data is not None:
    # Th√™m ch·ªâ b√°o k·ªπ thu·∫≠t
    st.session_state.data = add_technical_indicators(st.session_state.data)
    
    # T·∫°o c√°c tab
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "üìä D·ªØ li·ªáu l·ªãch s·ª≠", 
        "‚öôÔ∏è C·∫•u h√¨nh m√¥ h√¨nh", 
        "üß™ Hu·∫•n luy·ªán", 
        "üìà D·ª± ƒëo√°n",
        "üîÑ So s√°nh ARIMA",
        "üíæ Qu·∫£n l√Ω m√¥ h√¨nh"
    ])
    
    with tab1:
        st.markdown('<h2 class="section-header">üìä D·ªØ li·ªáu l·ªãch s·ª≠ v√† Ch·ªâ b√°o k·ªπ thu·∫≠t</h2>', unsafe_allow_html=True)
        
        # Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n trong cards chuy√™n nghi·ªáp
        st.markdown('<h3 style="color: #4a5568; font-weight: 600; margin: 2rem 0 1rem 0;">üíπ T·ªïng quan th·ªã tr∆∞·ªùng h√¥m nay</h3>', unsafe_allow_html=True)
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown(f"""
            <div class="metric-card">
                <div class="metric-label">T·ªïng s·ªë phi√™n giao d·ªãch</div>
                <div class="metric-value">{len(st.session_state.data):,}</div>
                <div class="metric-sublabel">D·ªØ li·ªáu kh·∫£ d·ª•ng</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            latest_price = st.session_state.data['Close'].iloc[-1]
            st.markdown(f"""
            <div class="metric-card">
                <div class="metric-label">Gi√° ƒë√≥ng c·ª≠a</div>
                <div class="metric-value">{latest_price:,.0f}</div>
                <div class="metric-sublabel">VNƒê</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            price_change = st.session_state.data['Close'].iloc[-1] - st.session_state.data['Close'].iloc[-2]
            change_class = "metric-change-positive" if price_change >= 0 else "metric-change-negative"
            change_icon = "‚ñ≤" if price_change >= 0 else "‚ñº"
            change_text = "TƒÉng" if price_change >= 0 else "Gi·∫£m"
            st.markdown(f"""
            <div class="metric-card">
                <div class="metric-label">Thay ƒë·ªïi phi√™n</div>
                <div class="metric-value {change_class}">{change_icon} {abs(price_change):,.0f}</div>
                <div class="metric-sublabel">{change_text} so v·ªõi h√¥m qua</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            volatility = st.session_state.data['Close'].pct_change().std() * 100
            volatility_color = "#e53e3e" if volatility > 2 else "#38a169" if volatility < 1 else "#d69e2e"
            st.markdown(f"""
            <div class="metric-card">
                <div class="metric-label">ƒê·ªô bi·∫øn ƒë·ªông</div>
                <div class="metric-value" style="color: {volatility_color};">{volatility:.2f}%</div>
                <div class="metric-sublabel">ƒê·ªô l·ªách chu·∫©n</div>
            </div>
            """, unsafe_allow_html=True)
        
        # Kho·∫£ng c√°ch
        st.markdown("<br>", unsafe_allow_html=True)
        
        # Ch·ªçn kho·∫£ng th·ªùi gian hi·ªÉn th·ªã
        st.markdown('<h3 class="section-header">üìÖ C·∫•u h√¨nh kho·∫£ng th·ªùi gian ph√¢n t√≠ch</h3>', unsafe_allow_html=True)
        
        # Layout 3 c·ªôt cho date selection
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col1:
            start_date = st.date_input(
                "üìÖ T·ª´ ng√†y",
                value=st.session_state.data.index[-365] if len(st.session_state.data) > 365 else st.session_state.data.index[0],
                help="Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu ph√¢n t√≠ch"
            )
        
        with col2:
            end_date = st.date_input(
                "üìÖ ƒê·∫øn ng√†y", 
                value=st.session_state.data.index[-1],
                help="Ch·ªçn ng√†y k·∫øt th√∫c ph√¢n t√≠ch"
            )
            
        with col3:
            # Quick selection
            st.markdown("**‚ö° Ch·ªçn nhanh kho·∫£ng th·ªùi gian:**")
            quick_periods = {
                "1 th√°ng": 30,
                "3 th√°ng": 90, 
                "6 th√°ng": 180,
                "1 nƒÉm": 365,
                "T·∫•t c·∫£": len(st.session_state.data)
            }
            
            selected_period = st.selectbox(
                "Kho·∫£ng th·ªùi gian",
                list(quick_periods.keys()),
                index=3,
                help="Ch·ªçn kho·∫£ng th·ªùi gian ph·ªï bi·∫øn"
            )
            
            if selected_period and selected_period != "T·∫•t c·∫£":
                days_back = quick_periods[selected_period]
                start_date = st.session_state.data.index[-min(days_back, len(st.session_state.data))]
            elif selected_period == "T·∫•t c·∫£":
                start_date = st.session_state.data.index[0]
                end_date = st.session_state.data.index[-1]
        
        # L·ªçc d·ªØ li·ªáu theo kho·∫£ng th·ªùi gian
        mask = (st.session_state.data.index >= pd.to_datetime(start_date)) & (st.session_state.data.index <= pd.to_datetime(end_date))
        filtered_data = st.session_state.data.loc[mask]
        
        # Th√¥ng tin v·ªÅ kho·∫£ng th·ªùi gian ƒë∆∞·ª£c ch·ªçn
        st.markdown(f"""
        <div style="background: linear-gradient(135deg, #ebf8ff 0%, #bee3f8 100%); 
                    border: 1px solid #3182ce; border-radius: 12px; padding: 16px; margin: 1rem 0;">
            <span style="color: #2c5aa0; font-weight: 600;">
                üìä ƒêang hi·ªÉn th·ªã {len(filtered_data):,} phi√™n giao d·ªãch 
                t·ª´ {start_date.strftime('%d/%m/%Y')} ƒë·∫øn {end_date.strftime('%d/%m/%Y')}
            </span>
            <br>
            <span style="color: #4299e1; font-weight: 400; font-size: 0.9rem; margin-top: 4px;">
                üîÑ D·ªØ li·ªáu VN-Index ƒë∆∞·ª£c c·∫≠p nh·∫≠t h√†ng ng√†y t·ª´ S·ªü Giao d·ªãch Ch·ª©ng kho√°n TP.HCM (HOSE)
            </span>
        </div>
        """, unsafe_allow_html=True)
        
        # Bi·ªÉu ƒë·ªì gi√° v√† volume v·ªõi styling chuy√™n nghi·ªáp
        st.markdown('<h3 class="section-header">üìà Bi·ªÉu ƒë·ªì ph√¢n t√≠ch k·ªπ thu·∫≠t</h3>', unsafe_allow_html=True)
        
        fig = make_subplots(
            rows=4, cols=1,
            shared_xaxes=True,
            vertical_spacing=0.08,
            subplot_titles=(
                'Bi·ªÉu ƒë·ªì n·∫øn v√† ƒë∆∞·ªùng trung b√¨nh ƒë·ªông', 
                'Kh·ªëi l∆∞·ª£ng giao d·ªãch', 
                'Ch·ªâ s·ªë RSI (Relative Strength Index)', 
                'MACD (Moving Average Convergence Divergence)'
            ),
            row_heights=[0.4, 0.2, 0.2, 0.2]
        )
        
        # Bi·ªÉu ƒë·ªì n·∫øn v·ªõi m√†u s·∫Øc chuy√™n nghi·ªáp
        fig.add_trace(
            go.Candlestick(
                x=filtered_data.index,
                open=filtered_data['Open'],
                high=filtered_data['High'],
                low=filtered_data['Low'],
                close=filtered_data['Close'],
                name="Gi√°",
                increasing_line_color='#38a169',
                decreasing_line_color='#e53e3e',
                increasing_fillcolor='#38a169',
                decreasing_fillcolor='#e53e3e'
            ),
            row=1, col=1
        )
        
        # ƒê∆∞·ªùng MA v·ªõi m√†u s·∫Øc hi·ªán ƒë·∫°i
        fig.add_trace(
            go.Scatter(
                x=filtered_data.index,
                y=filtered_data['MA_20'],
                mode='lines',
                name='MA 20',
                line=dict(color='#3182ce', width=2),
                opacity=0.8
            ),
            row=1, col=1
        )
        
        fig.add_trace(
            go.Scatter(
                x=filtered_data.index,
                y=filtered_data['MA_50'],
                mode='lines',
                name='MA 50',
                line=dict(color='#d69e2e', width=2),
                opacity=0.8
            ),
            row=1, col=1
        )
        
        # Volume v·ªõi gradient
        colors = ['#38a169' if row['Close'] >= row['Open'] else '#e53e3e' for idx, row in filtered_data.iterrows()]
        fig.add_trace(
            go.Bar(
                x=filtered_data.index,
                y=filtered_data['Volume'],
                name="Volume",
                marker_color=colors,
                opacity=0.7
            ),
            row=2, col=1
        )
        
        # RSI v·ªõi zones
        fig.add_trace(
            go.Scatter(
                x=filtered_data.index,
                y=filtered_data['RSI'],
                mode='lines',
                name='RSI',
                line=dict(color='#805ad5', width=2)
            ),
            row=3, col=1
        )
        
        # RSI zones
        fig.add_hline(y=70, line_dash="dash", line_color="#e53e3e", row=3, col=1, opacity=0.7)
        fig.add_hline(y=30, line_dash="dash", line_color="#38a169", row=3, col=1, opacity=0.7)
        fig.add_hline(y=50, line_dash="dot", line_color="#718096", row=3, col=1, opacity=0.5)
        
        # MACD
        fig.add_trace(
            go.Scatter(
                x=filtered_data.index,
                y=filtered_data['MACD'],
                mode='lines',
                name='MACD',
                line=dict(color='#3182ce', width=2)
            ),
            row=4, col=1
        )
        
        fig.add_trace(
            go.Scatter(
                x=filtered_data.index,
                y=filtered_data['MACD_Signal'],
                mode='lines',
                name='Signal',
                line=dict(color='#e53e3e', width=2)
            ),
            row=4, col=1
        )
        
        # MACD Histogram with colors
        histogram_colors = ['#38a169' if val >= 0 else '#e53e3e' for val in filtered_data['MACD_Histogram']]
        fig.add_trace(
            go.Bar(
                x=filtered_data.index,
                y=filtered_data['MACD_Histogram'],
                name="Histogram",
                marker_color=histogram_colors,
                opacity=0.6
            ),
            row=4, col=1
        )
        
        # Layout styling
        fig.update_layout(
            height=900,
            title_text="",
            showlegend=True,
            template="plotly_white",
            font=dict(family="Inter, sans-serif", size=12),
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="center",
                x=0.5
            ),
            margin=dict(l=60, r=40, t=80, b=60),
            autosize=True
        )
        
        fig.update_xaxes(rangeslider_visible=False)
        
        # Remove subplot titles styling for cleaner look
        for i in range(1, 5):
            fig.update_yaxes(title_text="", row=i, col=1)
            fig.update_xaxes(title_text="", row=i, col=1)
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Hi·ªÉn th·ªã d·ªØ li·ªáu d·∫°ng b·∫£ng v·ªõi styling chuy√™n nghi·ªáp
        st.markdown('<h3 class="section-header">üìã D·ªØ li·ªáu giao d·ªãch g·∫ßn ƒë√¢y</h3>', unsafe_allow_html=True)
        
        # T·∫°o DataFrame hi·ªÉn th·ªã v·ªõi formatting ƒë·∫πp - s·∫Øp x·∫øp theo ng√†y m·ªõi nh·∫•t
        display_data = filtered_data.tail(20).round(2)
        display_data = display_data.sort_index(ascending=False)
        display_data.index = display_data.index.strftime('%d/%m/%Y')
        
        st.dataframe(
            display_data[['Open', 'High', 'Low', 'Close', 'Volume']],
            use_container_width=True,
            height=400
        )
    
    with tab2:
        st.markdown('<h2 class="section-header">‚öôÔ∏è C·∫•u h√¨nh m√¥ h√¨nh AI</h2>', unsafe_allow_html=True)
        
        # Layout 3 c·ªôt cho c·∫•u h√¨nh chuy√™n nghi·ªáp
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col1:
            st.markdown("""
            <div class="metric-card" style="margin-bottom: 1rem;">
                <h4 style="color: #2d3748; margin-bottom: 16px; font-weight: 700; display: flex; align-items: center;">
                    Ki·∫øn tr√∫c m√¥ h√¨nh
                </h4>
            </div>
            """, unsafe_allow_html=True)
            
            model_type = st.selectbox(
                "ü§ñ Lo·∫°i m√¥ h√¨nh neural network",
                ["LSTM", "GRU"],
                help="LSTM: Ph√π h·ª£p v·ªõi d·ªØ li·ªáu chu·ªói th·ªùi gian ph·ª©c t·∫°p | GRU: T√≠nh to√°n nhanh h∆°n, hi·ªáu qu·∫£ cho d·ªØ li·ªáu ƒë∆°n gi·∫£n h∆°n"
            )
            
            num_neurons = st.slider(
                "üî¢ S·ªë neurons m·ªói layer",
                min_value=32,
                max_value=256,
                value=64,
                step=32,
                help="S·ªë neurons trong m·ªói hidden layer. Nhi·ªÅu neurons = m√¥ h√¨nh ph·ª©c t·∫°p h∆°n nh∆∞ng c√≥ th·ªÉ overfitting"
            )
            
            dropout_rate = st.slider(
                "üõ°Ô∏è T·ª∑ l·ªá dropout",
                min_value=0.1,
                max_value=0.8,
                value=0.35,
                step=0.05,
                help="Dropout rate ƒë·ªÉ tr√°nh overfitting. 0.3-0.5 l√† l·ª±a ch·ªçn ph·ªï bi·∫øn"
            )
            
            num_hidden_layers = st.slider(
                "üìö S·ªë l·ªõp ·∫©n",
                min_value=1,
                max_value=4,
                value=2,
                help="S·ªë hidden layers trong m√¥ h√¨nh. Nhi·ªÅu layer = h·ªçc ƒë∆∞·ª£c pattern ph·ª©c t·∫°p h∆°n"
            )
        
        with col2:
            st.markdown("""
            <div class="metric-card" style="margin-bottom: 1rem;">
                <h4 style="color: #2d3748; margin-bottom: 16px; font-weight: 700; display: flex; align-items: center;">
                    C·∫•u h√¨nh hu·∫•n luy·ªán
                </h4>
            </div>
            """, unsafe_allow_html=True)
            
            epochs = st.slider(
                "üîÑ S·ªë epochs",
                min_value=10,
                max_value=200,
                value=50,
                step=10,
                help="S·ªë l·∫ßn hu·∫•n luy·ªán tr√™n to√†n b·ªô dataset. Nhi·ªÅu epochs c√≥ th·ªÉ c·∫£i thi·ªán accuracy nh∆∞ng risk overfitting"
            )
            
            batch_size = st.slider(
                "üì¶ K√≠ch th∆∞·ªõc batch",
                min_value=16,
                max_value=128,
                value=32,
                step=16,
                help="S·ªë samples x·ª≠ l√Ω c√πng l√∫c. Batch size l·ªõn = training nhanh h∆°n nh∆∞ng c·∫ßn nhi·ªÅu memory"
            )
            
            time_step = st.slider(
                "‚è∞ S·ªë time steps",
                min_value=10,
                max_value=100,
                value=50,
                step=10,
                help="S·ªë ng√†y l·ªãch s·ª≠ ƒë·ªÉ d·ª± ƒëo√°n gi√° ng√†y ti·∫øp theo. 30-60 ng√†y th∆∞·ªùng cho k·∫øt qu·∫£ t·ªët"
            )
            
            validation_split = st.slider(
                "‚úÖ T·ª∑ l·ªá validation",
                min_value=0.1,
                max_value=0.3,
                value=0.1,
                step=0.05,
                help="Ph·∫ßn d·ªØ li·ªáu d√πng ƒë·ªÉ validate trong qu√° tr√¨nh training (10-20% l√† ph·ªï bi·∫øn)"
            )
            
            learning_rate = st.slider(
                "üéØ Learning rate",
                min_value=0.0001,
                max_value=0.01,
                value=0.001,
                step=0.0001,
                format="%.4f",
                help="T·ªëc ƒë·ªô h·ªçc c·ªßa m√¥ h√¨nh. Gi√° tr·ªã nh·ªè = h·ªçc ch·∫≠m nh∆∞ng ·ªïn ƒë·ªãnh, gi√° tr·ªã l·ªõn = h·ªçc nhanh nh∆∞ng c√≥ th·ªÉ kh√¥ng ·ªïn ƒë·ªãnh"
            )
            
            # Th√™m g·ª£i √Ω v·ªÅ learning rate
            lr_suggestions = {
                0.0001: "R·∫•t ch·∫≠m - Cho d·ªØ li·ªáu ph·ª©c t·∫°p",
                0.001: "Ti√™u chu·∫©n - L·ª±a ch·ªçn ph·ªï bi·∫øn",
                0.003: "Nhanh - Cho th·ª≠ nghi·ªám nhanh",
                0.01: "R·∫•t nhanh - C√≥ th·ªÉ kh√¥ng ·ªïn ƒë·ªãnh"
            }
            
            closest_lr = min(lr_suggestions.keys(), key=lambda x: abs(x - learning_rate))
            if abs(closest_lr - learning_rate) < 0.0005:
                st.info(f"üí° **{closest_lr}**: {lr_suggestions[closest_lr]}")
        
        with col3:
            st.markdown("""
            <div class="metric-card" style="margin-bottom: 1rem;">
                <h4 style="color: #2d3748; margin-bottom: 16px; font-weight: 700; display: flex; align-items: center;">
                    C·∫•u h√¨nh d·ªØ li·ªáu ƒë·∫ßu v√†o
                </h4>
            </div>
            """, unsafe_allow_html=True)
            
            available_features = ['Open', 'High', 'Low', 'Close', 'Volume', 'RSI', 'MACD', 'MA_20', 'MA_50']
            
            # Feature descriptions for better UX
            feature_descriptions = {
                'Open': 'Gi√° m·ªü c·ª≠a',
                'High': 'Gi√° cao nh·∫•t',
                'Low': 'Gi√° th·∫•p nh·∫•t', 
                'Close': 'Gi√° ƒë√≥ng c·ª≠a',
                'Volume': 'Kh·ªëi l∆∞·ª£ng giao d·ªãch',
                'RSI': 'Relative Strength Index',
                'MACD': 'Moving Average Convergence Divergence',
                'MA_20': 'ƒê∆∞·ªùng trung b√¨nh ƒë·ªông 20 ng√†y',
                'MA_50': 'ƒê∆∞·ªùng trung b√¨nh ƒë·ªông 50 ng√†y'
            }
            
            features_to_use = st.multiselect(
                "üéØ Ch·ªçn features ƒë·∫ßu v√†o",
                available_features,
                default=['Close', 'Volume', 'RSI', 'MACD'],
                help="Ch·ªçn c√°c ƒë·∫∑c tr∆∞ng l√†m input cho m√¥ h√¨nh. Close + Volume + RSI + MACD l√† combo ph·ªï bi·∫øn",
                format_func=lambda x: f"{x} ({feature_descriptions.get(x, x)})"
            )
            
            target_column = st.selectbox(
                "üéØ C·ªôt d·ª± ƒëo√°n (target)",
                features_to_use if features_to_use else ['Close'],
                index=0 if 'Close' in features_to_use else 0,
                help="C·ªôt d·ªØ li·ªáu m√† m√¥ h√¨nh s·∫Ω h·ªçc ƒë·ªÉ d·ª± ƒëo√°n"
            )
            
            # Th√™m th√¥ng tin v·ªÅ dataset
            if st.session_state.data is not None:
                total_samples = len(st.session_state.data) - time_step
                train_samples = int(total_samples * (1 - validation_split) * 0.8)  # 80% for train, 20% for test
                val_samples = int(total_samples * validation_split)
                test_samples = total_samples - train_samples - val_samples
                
                st.markdown(f"""
                <div style="background: linear-gradient(135deg, #f0fff4 0%, #c6f6d5 100%); 
                            border: 1px solid #38a169; border-radius: 12px; padding: 16px; margin-top: 1rem;">
                    <div style="color: #276749; font-weight: 600; margin-bottom: 8px;">üìà Th√¥ng tin dataset:</div>
                    <div style="color: #276749; font-size: 0.9rem;">
                        ‚Ä¢ <strong>T·ªïng m·∫´u hu·∫•n luy·ªán:</strong> {train_samples:,} samples<br>
                        ‚Ä¢ <strong>M·∫´u validation:</strong> {val_samples:,} samples<br>
                        ‚Ä¢ <strong>M·∫´u test:</strong> {test_samples:,} samples<br>
                        ‚Ä¢ <strong>Features ƒë∆∞·ª£c ch·ªçn:</strong> {len(features_to_use)} features<br>
                        ‚Ä¢ <strong>Sequence length:</strong> {time_step} time steps
                    </div>
                </div>
                """, unsafe_allow_html=True)
        
        # Hi·ªÉn th·ªã t·ªïng quan c·∫•u h√¨nh
        if features_to_use and target_column:
            st.markdown('<h3 class="section-header">üìã T·ªïng quan c·∫•u h√¨nh m√¥ h√¨nh</h3>', unsafe_allow_html=True)
            
            config_summary_cols = st.columns(4)
            
            with config_summary_cols[0]:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-label">Ki·∫øn tr√∫c</div>
                    <div class="metric-value" style="font-size: 1.8rem;">{model_type}</div>
                    <div class="metric-sublabel">{num_neurons} neurons √ó {num_hidden_layers} layers</div>
                </div>
                """, unsafe_allow_html=True)
            
            with config_summary_cols[1]:
                estimated_time = epochs * 2 if model_type == "LSTM" else epochs * 1.5  # Rough estimation
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-label">Training Config</div>
                    <div class="metric-value" style="font-size: 1.8rem;">{epochs}</div>
                    <div class="metric-sublabel">epochs, LR: {learning_rate:.4f}</div>
                </div>
                """, unsafe_allow_html=True)
            
            with config_summary_cols[2]:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-label">Input Shape</div>
                    <div class="metric-value" style="font-size: 1.8rem;">{len(features_to_use)}</div>
                    <div class="metric-sublabel">{time_step} √ó {len(features_to_use)} features</div>
                </div>
                """, unsafe_allow_html=True)
            
            with config_summary_cols[3]:
                complexity_score = (num_neurons * num_hidden_layers * len(features_to_use)) / 1000
                complexity_level = "Th·∫•p" if complexity_score < 1 else "Trung b√¨nh" if complexity_score < 5 else "Cao"
                complexity_color = "#38a169" if complexity_score < 1 else "#d69e2e" if complexity_score < 5 else "#e53e3e"
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-label">ƒê·ªô ph·ª©c t·∫°p</div>
                    <div class="metric-value" style="font-size: 1.8rem; color: {complexity_color};">{complexity_level}</div>
                    <div class="metric-sublabel">Score: {complexity_score:.1f}</div>
                </div>
                """, unsafe_allow_html=True)
            
            # Success message with next step guidance
            st.markdown("""
            <div style="background: linear-gradient(135deg, #f0fff4 0%, #c6f6d5 100%); 
                        border-left: 6px solid #38a169; border-radius: 12px; padding: 20px; margin-top: 1.5rem;">
                <div style="color: #276749; font-weight: 700; font-size: 1.1rem; margin-bottom: 8px;">
                    ‚úÖ C·∫•u h√¨nh ho√†n t·∫•t!
                </div>
                <div style="color: #276749; font-size: 0.95rem;">
                    üöÄ M√¥ h√¨nh ƒë√£ s·∫µn s√†ng ƒë·ªÉ hu·∫•n luy·ªán. Chuy·ªÉn sang tab <strong>"üß™ Hu·∫•n luy·ªán"</strong> ƒë·ªÉ b·∫Øt ƒë·∫ßu.
                </div>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div style="background: linear-gradient(135deg, #fffaf0 0%, #fbd38d 100%); 
                        border-left: 6px solid #d69e2e; border-radius: 12px; padding: 20px; margin-top: 1.5rem;">
                <div style="color: #b7791f; font-weight: 600; font-size: 1rem;">
                    ‚ö†Ô∏è C·∫•u h√¨nh ch∆∞a ho√†n t·∫•t
                </div>
                <div style="color: #b7791f; font-size: 0.9rem; margin-top: 4px;">
                    Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt feature v√† target column ƒë·ªÉ ti·∫øp t·ª•c.
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        # L∆∞u c·∫•u h√¨nh v√†o session state
        st.session_state.model_config = {
            'model_type': model_type,
            'num_neurons': num_neurons,
            'dropout_rate': dropout_rate,
            'num_hidden_layers': num_hidden_layers,
            'epochs': epochs,
            'batch_size': batch_size,
            'time_step': time_step,
            'validation_split': validation_split,
            'learning_rate': learning_rate,
            'features_to_use': features_to_use,
            'target_column': target_column
        }
        
        if features_to_use and target_column:
            st.success(f"‚úÖ C·∫•u h√¨nh ho√†n t·∫•t! S·∫µn s√†ng hu·∫•n luy·ªán m√¥ h√¨nh {model_type}")
        else:
            st.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt feature v√† target column")
    
    with tab3:
        st.header("üß™ Hu·∫•n luy·ªán m√¥ h√¨nh")
        
        if 'model_config' in st.session_state and st.session_state.model_config['features_to_use']:
            config = st.session_state.model_config
            
            # Hi·ªÉn th·ªã c·∫•u h√¨nh hi·ªán t·∫°i
            st.subheader("C·∫•u h√¨nh hi·ªán t·∫°i")
            
            # Hi·ªÉn th·ªã c·∫•u h√¨nh chi ti·∫øt trong 3 c·ªôt
            config_cols = st.columns(3)
            
            with config_cols[0]:
                st.info("**Th√¥ng s·ªë m√¥ h√¨nh**")
                st.write(f"- **Lo·∫°i m√¥ h√¨nh:** {config['model_type']}")
                st.write(f"- **S·ªë neurons:** {config['num_neurons']}")
                st.write(f"- **Dropout rate:** {config['dropout_rate']}")
                st.write(f"- **S·ªë hidden layers:** {config['num_hidden_layers']}")
            
            with config_cols[1]:
                st.info("**Th√¥ng s·ªë hu·∫•n luy·ªán**")
                st.write(f"- **Epochs:** {config['epochs']}")
                st.write(f"- **Batch size:** {config['batch_size']}")
                st.write(f"- **Time steps:** {config['time_step']}")
                st.write(f"- **Validation split:** {config['validation_split']}")
                st.write(f"- **Learning rate:** {config.get('learning_rate', 0.001)}")
            
            with config_cols[2]:
                st.info("**Th√¥ng s·ªë d·ªØ li·ªáu**")
                st.write(f"- **Features:** {len(config['features_to_use'])}")
                st.write(f"- **Features ƒë·∫ßu v√†o:** {', '.join(config['features_to_use'])}")
                st.write(f"- **Target:** {config['target_column']}")
                if 'data' in st.session_state and st.session_state.data is not None:
                    st.write(f"- **S·ªë d√≤ng d·ªØ li·ªáu:** {len(st.session_state.data)}")

            # C·∫£nh b√°o kh√¥ng chuy·ªÉn tab khi hu·∫•n luy·ªán
            st.warning("‚ö†Ô∏è Khi hu·∫•n luy·ªán, vui l√≤ng kh√¥ng chuy·ªÉn tab ho·∫∑c thao t√°c kh√°c cho ƒë·∫øn khi ho√†n t·∫•t ƒë·ªÉ tr√°nh l·ªói tr·∫°ng th√°i!", icon="‚ö†Ô∏è")
            
            # N√∫t hu·∫•n luy·ªán
            if st.button("üöÄ B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán", type="primary", use_container_width=True):
                try:
                    with st.spinner("ƒêang ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu..."):
                        # Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
                        X_train, y_train, X_test, y_test, scaler, scaled_data = preprocess_data(
                            st.session_state.data.dropna(),
                            config['features_to_use'],
                            config['target_column'],
                            config['time_step']
                        )
                        
                        st.session_state.scaler = scaler
                        st.session_state.scaled_data = scaled_data
                        st.session_state.X_test = X_test
                        st.session_state.y_test = y_test
                        # Ghi th√¥ng tin c·∫•u h√¨nh m√¥ h√¨nh ra file JSON ƒë·ªÉ minh b·∫°ch t√°i l·∫≠p
                        try:
                            # Chu·∫©n b·ªã th√¥ng tin dataset
                            data_df = st.session_state.data
                            date_min = data_df.index.min().date().isoformat() if len(data_df.index) else None
                            date_max = data_df.index.max().date().isoformat() if len(data_df.index) else None

                            # Ki·ªÉm tra t√≠nh d·ª´ng cho ARIMA (tr√™n c·ªôt target)
                            try:
                                series_for_arima, stationarity = prepare_data_for_arima(data_df, target_column=config['target_column'])
                                stationarity_info = {
                                    "adf_stat": round(float(stationarity.get('adf_statistic', float('nan'))), 4) if stationarity else None,
                                    "p_value": round(float(stationarity.get('p_value', float('nan'))), 4) if stationarity else None,
                                    "stationary": bool(stationarity.get('is_stationary')) if stationarity else None
                                }
                            except Exception:
                                stationarity_info = {
                                    "adf_stat": None,
                                    "p_value": None,
                                    "stationary": None
                                }

                            # M√¥ t·∫£ c√°c layer c·ªßa NN hi·ªán t·∫°i
                            nn_layers = [{
                                "type": config['model_type'],
                                "units": int(config['num_neurons']),
                                "dropout": float(config['dropout_rate'])
                            } for _ in range(int(config['num_hidden_layers']))]
                            nn_layers.append({
                                "type": "Dense",
                                "units": 1,
                                "activation": "linear"
                            })

                            # X√¢y d·ª±ng object JSON theo m·∫´u cung c·∫•p
                            model_info = {
                                "dataset": {
                                    "name": "VNIndex",
                                    "features": list(config['features_to_use']),
                                    "sequence_length": int(config['time_step']),
                                    "train_split": 0.8,
                                    "date_range": {
                                        "from": date_min,
                                        "to": date_max
                                    }
                                },
                                config['model_type']: {
                                    "layers": nn_layers,
                                    "epochs": int(config['epochs']),
                                    "batch_size": int(config['batch_size']),
                                    "learning_rate": float(config.get('learning_rate', 0.001)),
                                    "validation_split": float(config.get('validation_split', 0.1)),
                                    "optimizer": "adam",
                                    "loss": "mae"
                                },
                                "ARIMA": {
                                    "order": None,
                                    "seasonal_order": None,
                                    "stationarity_test": stationarity_info,
                                    "auto_param_search": False
                                },
                                "meta": {
                                    "created_at": datetime.utcnow().isoformat() + "Z",
                                    "created_by": os.getenv("USER", "dashboard"),
                                    "reproducibility": {"seed": 42},
                                    "notes": "Generated automatically when training starts."
                                }
                            }

                            # N·∫øu model hi·ªán t·∫°i kh√¥ng ph·∫£i GRU/LSTM c√≤n l·∫°i, th√™m m·ª•c 'planned' ƒë∆°n gi·∫£n cho lo·∫°i kia
                            other_type = "GRU" if config['model_type'] == "LSTM" else "LSTM"
                            model_info[other_type] = {"planned": True}

                            os.makedirs("models", exist_ok=True)
                            with open(os.path.join("models", "model_info.json"), "w", encoding="utf-8") as f:
                                json.dump(model_info, f, ensure_ascii=False, indent=2)
                        except Exception as _json_err:
                            # Kh√¥ng ch·∫∑n qu√° tr√¨nh train n·∫øu ghi file l·ªói, ch·ªâ th√¥ng b√°o nh·∫π
                            st.warning(f"Kh√¥ng th·ªÉ l∆∞u model_info.json: {_json_err}")
                    
                    st.success(f"‚úÖ Ti·ªÅn x·ª≠ l√Ω ho√†n t·∫•t! Shape: Train {X_train.shape}, Test {X_test.shape}")
                    
                    with st.spinner("ƒêang x√¢y d·ª±ng v√† hu·∫•n luy·ªán m√¥ h√¨nh..."):
                        # X√¢y d·ª±ng m√¥ h√¨nh
                        model = build_model(
                            config['model_type'],
                            config['time_step'],
                            len(config['features_to_use']),
                            config['num_neurons'],
                            config['dropout_rate'],
                            config['num_hidden_layers'],
                            learning_rate=config.get('learning_rate', 0.001)
                        )
                        
                        # Callback
                        early_stopping = EarlyStopping(
                            monitor='val_loss',
                            patience=10,
                            min_delta=0.001,
                            restore_best_weights=True
                        )
                        
                        # Progress bar
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        # Custom callback ƒë·ªÉ c·∫≠p nh·∫≠t progress
                        class StreamlitCallback(tf.keras.callbacks.Callback):
                            def on_epoch_end(self, epoch, logs=None):
                                progress = (epoch + 1) / config['epochs']
                                progress_bar.progress(progress)
                                status_text.text(f"Epoch {epoch + 1}/{config['epochs']} - Loss: {logs['loss']:.4f} - Val Loss: {logs['val_loss']:.4f}")
                        
                        # Hu·∫•n luy·ªán
                        history = train_model(
                            model,
                            X_train, y_train,
                            config,
                            callbacks=[early_stopping, StreamlitCallback()]
                        )
                        
                        st.session_state.model = model
                        st.session_state.training_history = history
                        
                        # ƒê√°nh gi√° m√¥ h√¨nh (trong c√πng kh·ªëi spinner)
                        metrics, y_test_inv, y_pred_inv = evaluate_model(
                            model, X_test, y_test, scaler,
                            config['features_to_use'].index(config['target_column'])
                        )
                        
                        st.session_state.y_test_inv = y_test_inv
                        st.session_state.y_pred_inv = y_pred_inv
                        st.session_state.model_metrics = metrics
                    
                    st.success("üéâ Hu·∫•n luy·ªán v√† ƒë√°nh gi√° ho√†n t·∫•t!")
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ (ch·ªâ khi c√≥ d·ªØ li·ªáu)
                    if (st.session_state.model_metrics and 
                        st.session_state.training_history and 
                        st.session_state.y_test_inv is not None and 
                        st.session_state.y_pred_inv is not None):
                        
                        st.subheader("üìä K·∫øt qu·∫£ ƒë√°nh gi√°")
                        
                        col1, col2, col3, col4 = st.columns(4)
                        
                        with col1:
                            st.metric("MAE", f"{st.session_state.model_metrics['MAE']:.2f}")
                        
                        with col2:
                            st.metric("MSE", f"{st.session_state.model_metrics['MSE']:.2f}")
                        
                        with col3:
                            st.metric("RMSE", f"{st.session_state.model_metrics['RMSE']:.2f}")
                        
                        with col4:
                            st.metric("R¬≤", f"{st.session_state.model_metrics['R¬≤']:.4f}")
                        
                        # Bi·ªÉu ƒë·ªì loss
                        fig_loss = go.Figure()
                        fig_loss.add_trace(go.Scatter(
                            y=st.session_state.training_history.history['loss'],
                            mode='lines',
                            name='Training Loss'
                        ))
                        fig_loss.add_trace(go.Scatter(
                            y=st.session_state.training_history.history['val_loss'],
                            mode='lines',
                            name='Validation Loss'
                        ))
                        fig_loss.update_layout(
                            title="Training History",
                            xaxis_title="Epoch",
                            yaxis_title="Loss"
                        )
                        st.plotly_chart(fig_loss, use_container_width=True)
                        
                        # Bi·ªÉu ƒë·ªì so s√°nh d·ª± ƒëo√°n
                        fig_pred = go.Figure()
                        fig_pred.add_trace(go.Scatter(
                            y=st.session_state.y_test_inv[-100:],
                            mode='lines',
                            name='Th·ª±c t·∫ø',
                            line=dict(color='blue')
                        ))
                        fig_pred.add_trace(go.Scatter(
                            y=st.session_state.y_pred_inv[-100:],
                            mode='lines',
                            name='D·ª± ƒëo√°n',
                            line=dict(color='red')
                        ))
                        fig_pred.update_layout(
                            title="So s√°nh d·ª± ƒëo√°n vs th·ª±c t·∫ø (100 ng√†y cu·ªëi)",
                            xaxis_title="Ng√†y",
                            yaxis_title="Gi√°"
                        )
                        st.plotly_chart(fig_pred, use_container_width=True)
                    
                except Exception as e:
                    st.error(f"‚ùå L·ªói trong qu√° tr√¨nh hu·∫•n luy·ªán: {e}")
        else:
            st.warning("‚ö†Ô∏è Vui l√≤ng c·∫•u h√¨nh m√¥ h√¨nh tr∆∞·ªõc khi hu·∫•n luy·ªán!")
    
    with tab4:
        st.header("üìà D·ª± ƒëo√°n t∆∞∆°ng lai")
        
        if st.session_state.model is not None and st.session_state.scaler is not None:
            st.subheader("C·∫•u h√¨nh d·ª± ƒëo√°n")

            n_future = st.slider(
                "S·ªë ng√†y d·ª± ƒëo√°n",
                min_value=1,
                max_value=20,
                value=5,
                help="S·ªë ng√†y mu·ªën d·ª± ƒëo√°n trong t∆∞∆°ng lai"
            )

            if st.button("üîÆ D·ª± ƒëo√°n t∆∞∆°ng lai", type="primary"):
                try:
                    with st.spinner("ƒêang th·ª±c hi·ªán d·ª± ƒëo√°n..."):
                        config = st.session_state.model_config

                        # Th√™m progress bar cho d·ª± ƒëo√°n nhi·ªÅu ng√†y
                        progress_bar = st.progress(0)
                        status_text = st.empty()

                        # Th·ª±c hi·ªán d·ª± ƒëo√°n t·ª´ng ng√†y
                        future_predictions = []
                        # T·∫°o future_dates ch·ªâ g·ªìm ng√†y giao d·ªãch (th·ª© 2-6)
                        last_date = st.session_state.data.index[-1]
                        future_dates = []
                        days_added = 0
                        current_date = last_date
                        while days_added < n_future:
                            current_date += pd.Timedelta(days=1)
                            if current_date.weekday() < 5:  # 0=Mon, ..., 4=Fri
                                future_dates.append(current_date)
                                days_added += 1

                        for i in range(n_future):
                            preds = predict_future(
                                st.session_state.model,
                                st.session_state.scaled_data,
                                config['time_step'],
                                i+1,
                                st.session_state.scaler,
                                len(config['features_to_use']),
                                config['features_to_use'].index(config['target_column']),
                                config['features_to_use']
                            )
                            # L·∫•y gi√° tr·ªã d·ª± ƒëo√°n m·ªõi nh·∫•t
                            future_predictions.append(preds[-1])
                            progress_bar.progress((i+1)/n_future)
                            status_text.text(f"D·ª± ƒëo√°n ng√†y {i+1}/{n_future}")
                        st.session_state.future_predictions = future_predictions
                        progress_bar.empty()
                        status_text.empty()
                    st.success(f"‚úÖ D·ª± ƒëo√°n {n_future} ng√†y t∆∞∆°ng lai ho√†n t·∫•t!")

                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n
                    st.subheader("üìä K·∫øt qu·∫£ d·ª± ƒëo√°n")

                    # T·∫°o DataFrame cho d·ª± ƒëo√°n
                    prediction_df = pd.DataFrame({
                        'Ng√†y': future_dates,
                        'Gi√° d·ª± ƒëo√°n': future_predictions
                    })

                    # Hi·ªÉn th·ªã b·∫£ng d·ª± ƒëo√°n
                    st.dataframe(prediction_df, use_container_width=True)

                    # Bi·ªÉu ƒë·ªì d·ª± ƒëo√°n
                    fig = go.Figure()

                    # D·ªØ li·ªáu l·ªãch s·ª≠ (100 ng√†y cu·ªëi)
                    historical_data = st.session_state.data.tail(100)
                    fig.add_trace(go.Scatter(
                        x=historical_data.index,
                        y=historical_data['Close'],
                        mode='lines',
                        name='D·ªØ li·ªáu l·ªãch s·ª≠',
                        line=dict(color='blue')
                    ))

                    # D·ª± ƒëo√°n t∆∞∆°ng lai
                    fig.add_trace(go.Scatter(
                        x=future_dates,
                        y=future_predictions,
                        mode='lines+markers',
                        name='D·ª± ƒëo√°n t∆∞∆°ng lai',
                        line=dict(color='red', dash='dash'),
                        marker=dict(size=6)
                    ))

                    # ƒê∆∞·ªùng n·ªëi gi·ªØa d·ªØ li·ªáu l·ªãch s·ª≠ v√† d·ª± ƒëo√°n
                    fig.add_trace(go.Scatter(
                        x=[historical_data.index[-1], future_dates[0]],
                        y=[historical_data['Close'].iloc[-1], future_predictions[0]],
                        mode='lines',
                        name='K·∫øt n·ªëi',
                        line=dict(color='gray', dash='dot'),
                        showlegend=False
                    ))

                    fig.update_layout(
                        title=f"D·ª± ƒëo√°n gi√° VNIndex cho {n_future} ng√†y t·ªõi",
                        xaxis_title="Ng√†y",
                        yaxis_title="Gi√°",
                        hovermode='x unified'
                    )

                    st.plotly_chart(fig, use_container_width=True)

                    # Th·ªëng k√™ d·ª± ƒëo√°n
                    col1, col2, col3, col4 = st.columns(4)

                    current_price = st.session_state.data['Close'].iloc[-1]
                    predicted_price = future_predictions[-1]
                    price_change = predicted_price - current_price
                    price_change_pct = (price_change / current_price) * 100

                    with col1:
                        st.metric("Gi√° hi·ªán t·∫°i", f"{current_price:,.0f}")

                    with col2:
                        st.metric("Gi√° d·ª± ƒëo√°n", f"{predicted_price:,.0f}")

                    with col3:
                        st.metric("Thay ƒë·ªïi", f"{price_change:,.0f}", delta=f"{price_change:,.0f}")

                    with col4:
                        st.metric("Thay ƒë·ªïi (%)", f"{price_change_pct:.2f}%", delta=f"{price_change_pct:.2f}%")
                except Exception as e:
                    st.error(f"‚ùå L·ªói trong qu√° tr√¨nh d·ª± ƒëo√°n: {e}")
        else:
            st.warning("‚ö†Ô∏è Vui l√≤ng hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc khi d·ª± ƒëo√°n!")
    
    with tab5:
        st.header("üîÑ So s√°nh m√¥ h√¨nh LSTM/GRU vs ARIMA")
        
        if st.session_state.data is not None:
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("‚öôÔ∏è C·∫•u h√¨nh ARIMA")
                
                # Ki·ªÉm tra t√≠nh d·ª´ng
                series, stationarity_test = prepare_data_for_arima(st.session_state.data)
                
                st.write("**Ki·ªÉm tra t√≠nh d·ª´ng (ADF Test):**")
                st.write(f"- ADF Statistic: {stationarity_test['adf_statistic']:.4f}")
                st.write(f"- P-value: {stationarity_test['p_value']:.4f}")
                st.write(f"- Chu·ªói d·ª´ng: {'‚úÖ C√≥' if stationarity_test['is_stationary'] else '‚ùå Kh√¥ng'}")
                
                # T√πy ch·ªçn tham s·ªë ARIMA
                auto_arima = st.checkbox("T·ª± ƒë·ªông t√¨m tham s·ªë t·ªëi ∆∞u", value=True)
                
                if not auto_arima:
                    col_p, col_d, col_q = st.columns(3)
                    with col_p:
                        p = st.number_input("p (AR order)", min_value=0, max_value=5, value=1)
                    with col_d:
                        d = st.number_input("d (Differencing)", min_value=0, max_value=2, value=1)
                    with col_q:
                        q = st.number_input("q (MA order)", min_value=0, max_value=5, value=1)
                    arima_order = (p, d, q)
                else:
                    arima_order = None
                
                # T·ª∑ l·ªá chia d·ªØ li·ªáu
                train_ratio = st.slider("T·ª∑ l·ªá d·ªØ li·ªáu hu·∫•n luy·ªán (%)", 60, 90, 80) / 100
                
            with col2:
                st.subheader("üìä K·∫øt qu·∫£ so s√°nh")
                
                if st.button("üöÄ Ch·∫°y so s√°nh m√¥ h√¨nh"):
                    with st.spinner("ƒêang hu·∫•n luy·ªán v√† so s√°nh m√¥ h√¨nh..."):
                        try:
                            # Chia d·ªØ li·ªáu
                            train_size = int(len(series) * train_ratio)
                            train_data = series[:train_size]
                            test_data = series[train_size:]
                            
                            # Hu·∫•n luy·ªán ARIMA
                            arima_model, final_order = train_arima_model(train_data, arima_order)
                            
                            if arima_model is not None:
                                st.success(f"‚úÖ ARIMA{final_order} hu·∫•n luy·ªán th√†nh c√¥ng!")
                                
                                # D·ª± ƒëo√°n ARIMA
                                arima_predictions = predict_arima(arima_model, len(test_data))
                                
                                if arima_predictions is not None:
                                    # ƒê√°nh gi√° ARIMA
                                    arima_metrics = evaluate_arima_model(test_data.values, arima_predictions)
                                    
                                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ ARIMA
                                    st.write("**Hi·ªáu su·∫•t ARIMA:**")
                                    col_mae, col_mse, col_rmse, col_r2 = st.columns(4)
                                    
                                    with col_mae:
                                        st.metric("MAE", f"{arima_metrics['MAE']:.4f}")
                                    with col_mse:
                                        st.metric("MSE", f"{arima_metrics['MSE']:.4f}")
                                    with col_rmse:
                                        st.metric("RMSE", f"{arima_metrics['RMSE']:.4f}")
                                    with col_r2:
                                        st.metric("R¬≤", f"{arima_metrics['R¬≤']:.4f}")
                                    
                                    # L∆∞u k·∫øt qu·∫£ ARIMA v√†o session state
                                    st.session_state.arima_model = arima_model
                                    st.session_state.arima_metrics = arima_metrics
                                    st.session_state.arima_predictions = arima_predictions
                                    st.session_state.arima_test_data = test_data
                                    
                                    # So s√°nh v·ªõi LSTM/GRU n·∫øu c√≥
                                    if hasattr(st.session_state, 'model_metrics') and st.session_state.model_metrics:
                                        comparison = compare_models_performance(
                                            st.session_state.model_metrics, 
                                            arima_metrics
                                        )
                                        
                                        st.write("**So s√°nh LSTM/GRU vs ARIMA:**")
                                        comparison_df = pd.DataFrame({
                                            'Metric': list(comparison.keys()),
                                            'LSTM/GRU': [comparison[m]['LSTM/GRU'] for m in comparison.keys()],
                                            'ARIMA': [comparison[m]['ARIMA'] for m in comparison.keys()],
                                            'M√¥ h√¨nh t·ªët h∆°n': [comparison[m]['better_model'] for m in comparison.keys()]
                                        })
                                        st.dataframe(comparison_df, use_container_width=True)
                                    else:
                                        st.info("üí° Hu·∫•n luy·ªán m√¥ h√¨nh LSTM/GRU tr∆∞·ªõc ƒë·ªÉ so s√°nh!")
                                else:
                                    st.error("‚ùå L·ªói khi d·ª± ƒëo√°n v·ªõi ARIMA")
                            else:
                                st.error("‚ùå L·ªói khi hu·∫•n luy·ªán ARIMA")
                                
                        except Exception as e:
                            st.error(f"‚ùå L·ªói: {str(e)}")
            
            # Bi·ªÉu ƒë·ªì so s√°nh d·ª± ƒëo√°n
            if (hasattr(st.session_state, 'arima_predictions') and 
                hasattr(st.session_state, 'arima_test_data')):
                
                st.subheader("üìà Bi·ªÉu ƒë·ªì so s√°nh d·ª± ƒëo√°n")
                
                # T·∫°o bi·ªÉu ƒë·ªì so s√°nh
                fig = go.Figure()
                
                # D·ªØ li·ªáu th·ª±c t·∫ø
                fig.add_trace(go.Scatter(
                    x=st.session_state.arima_test_data.index,
                    y=st.session_state.arima_test_data.values,
                    mode='lines',
                    name='Gi√° th·ª±c t·∫ø',
                    line=dict(color='blue', width=2)
                ))
                
                # D·ª± ƒëo√°n ARIMA
                fig.add_trace(go.Scatter(
                    x=st.session_state.arima_test_data.index,
                    y=st.session_state.arima_predictions,
                    mode='lines',
                    name='D·ª± ƒëo√°n ARIMA',
                    line=dict(color='red', width=2, dash='dash')
                ))
                
                # D·ª± ƒëo√°n LSTM/GRU n·∫øu c√≥
                if (hasattr(st.session_state, 'test_predictions') and 
                    st.session_state.test_predictions is not None):
                    fig.add_trace(go.Scatter(
                        x=st.session_state.arima_test_data.index[-len(st.session_state.test_predictions):],
                        y=st.session_state.test_predictions.flatten(),
                        mode='lines',
                        name='D·ª± ƒëo√°n LSTM/GRU',
                        line=dict(color='green', width=2, dash='dot')
                    ))
                
                fig.update_layout(
                    title="So s√°nh d·ª± ƒëo√°n gi·ªØa c√°c m√¥ h√¨nh",
                    xaxis_title="Th·ªùi gian",
                    yaxis_title="Gi√°",
                    hovermode='x unified',
                    height=500
                )
                
                st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è Vui l√≤ng t·∫£i d·ªØ li·ªáu tr∆∞·ªõc!")

    with tab6:
        st.header("üíæ Qu·∫£n l√Ω m√¥ h√¨nh")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("L∆∞u m√¥ h√¨nh")
            
            if st.session_state.model is not None:
                model_name = st.text_input(
                    "T√™n m√¥ h√¨nh",
                    value=f"model_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                )
                
                if st.button("üíæ L∆∞u m√¥ h√¨nh", type="primary"):
                    try:
                        # T·∫°o th∆∞ m·ª•c models n·∫øu ch∆∞a c√≥ v√† ƒë·∫£m b·∫£o quy·ªÅn
                        models_dir = "models"
                        if not os.path.exists(models_dir):
                            os.makedirs(models_dir, exist_ok=True)
                            os.chmod(models_dir, 0o777) # ƒê·∫∑t quy·ªÅn ƒë·∫ßy ƒë·ªß
                        
                        # L∆∞u m√¥ h√¨nh
                        model_path = f"models/{model_name}.h5"
                        st.session_state.model.save(model_path)
                        
                        # L∆∞u scaler v√† config
                        with open(f"models/{model_name}_scaler.pkl", 'wb') as f:
                            pickle.dump(st.session_state.scaler, f)
                        
                        with open(f"models/{model_name}_config.pkl", 'wb') as f:
                            pickle.dump(st.session_state.model_config, f)
                        
                        st.success(f"‚úÖ ƒê√£ l∆∞u m√¥ h√¨nh: {model_name}")
                        
                    except Exception as e:
                        st.error(f"‚ùå L·ªói khi l∆∞u m√¥ h√¨nh: {e}")
            else:
                st.warning("‚ö†Ô∏è Ch∆∞a c√≥ m√¥ h√¨nh ƒë·ªÉ l∆∞u!")
        
        with col2:
            st.subheader("T·∫£i m√¥ h√¨nh")
            
            # Li·ªát k√™ c√°c m√¥ h√¨nh ƒë√£ l∆∞u
            if os.path.exists("models"):
                model_files = [f for f in os.listdir("models") if f.endswith(".h5")]
                
                if model_files:
                    selected_model_load = st.selectbox(
                        "Ch·ªçn m√¥ h√¨nh ƒë·ªÉ t·∫£i",
                        model_files,
                        key="load_model_selectbox"
                    )
                    
                    if st.button("üìÇ T·∫£i m√¥ h√¨nh"):
                        try:
                            model_name = selected_model_load.replace(".h5", ".h5")
                            
                            # T·∫£i m√¥ h√¨nh v·ªõi custom_objects
                            st.session_state.model = keras_load_model(
                                f"models/{model_name}",
                                custom_objects={
                                    'mae': tf.keras.metrics.MeanAbsoluteError(),
                                    'mse': tf.keras.metrics.MeanSquaredError()
                                }
                            )
                            
                            # T·∫£i scaler
                            with open(f"models/{model_name.replace('.h5', '')}_scaler.pkl", 'rb') as f:
                                st.session_state.scaler = pickle.load(f)
                            
                            # T·∫£i config
                            with open(f"models/{model_name.replace('.h5', '')}_config.pkl", 'rb') as f:
                                st.session_state.model_config = pickle.load(f)
                            
                            # T√≠nh l·∫°i scaled_data ƒë·ªÉ s·ª≠ d·ª•ng cho predict_future
                            if st.session_state.data is not None:
                                try:
                                    df = st.session_state.data.dropna()
                                    features = st.session_state.model_config['features_to_use']
                                    # Chu·∫©n h√≥a theo scaler ƒë√£ load
                                    data_to_scale = df[features].values
                                    scaled_data = st.session_state.scaler.transform(data_to_scale)
                                    st.session_state.scaled_data = scaled_data
                                    st.success(f"‚úÖ ƒê√£ t·∫£i m√¥ h√¨nh: {model_name.replace('.h5', '')} - S·∫µn s√†ng d·ª± ƒëo√°n!")
                                    st.rerun()  # Force refresh giao di·ªán ƒë·ªÉ hi·ªÉn th·ªã button d·ª± ƒëo√°n
                                except Exception as e:
                                    st.success(f"‚úÖ ƒê√£ t·∫£i m√¥ h√¨nh: {model_name.replace('.h5', '')}")
                                    st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t√≠nh l·∫°i d·ªØ li·ªáu ƒë√£ scale: {e}")
                                    st.rerun()  # Force refresh ngay c·∫£ khi c√≥ l·ªói scale
                            else:
                                st.success(f"‚úÖ ƒê√£ t·∫£i m√¥ h√¨nh: {model_name.replace('.h5', '')}")
                                st.warning("‚ö†Ô∏è C·∫ßn t·∫£i d·ªØ li·ªáu tr∆∞·ªõc ƒë·ªÉ s·ª≠ d·ª•ng d·ª± ƒëo√°n")
                                st.rerun()  # Force refresh ƒë·ªÉ hi·ªÉn th·ªã UI ƒë√£ c·∫≠p nh·∫≠t
                            
                        except Exception as e:
                            st.error(f"‚ùå L·ªói khi t·∫£i m√¥ h√¨nh: {e}")
                            st.rerun()  # Refresh ƒë·ªÉ ƒë·∫£m b·∫£o UI consistent
                else:
                    st.info("üìÅ Ch∆∞a c√≥ m√¥ h√¨nh n√†o ƒë∆∞·ª£c l∆∞u")
            else:
                st.info("üìÅ Th∆∞ m·ª•c models ch∆∞a t·ªìn t·∫°i")

        with col2:
            st.subheader("X√≥a m√¥ h√¨nh")
            if os.path.exists("models"):
                model_files_to_delete = [f for f in os.listdir("models") if f.endswith(".h5")]
                if model_files_to_delete:
                    selected_model_delete = st.selectbox(
                        "Ch·ªçn m√¥ h√¨nh ƒë·ªÉ x√≥a",
                        model_files_to_delete,
                        key="delete_model_selectbox"
                    )
                    if st.button("üóëÔ∏è X√≥a m√¥ h√¨nh", type="secondary"):
                        try:
                            model_base_name = selected_model_delete.replace(".h5", "")
                            model_path = f"models/{model_base_name}.h5"
                            scaler_path = f"models/{model_base_name}_scaler.pkl"
                            config_path = f"models/{model_base_name}_config.pkl"

                            if os.path.exists(model_path):
                                os.remove(model_path)
                            if os.path.exists(scaler_path):
                                os.remove(scaler_path)
                            if os.path.exists(config_path):
                                os.remove(config_path)
                            st.success(f"‚úÖ ƒê√£ x√≥a m√¥ h√¨nh: {model_base_name}")
                            # Attempt to refresh the page; wrap in case the method is unavailable
                            try:
                                st.experimental_rerun()
                            except AttributeError:
                                pass
                        except Exception as e:
                            st.error(f"‚ùå L·ªói khi x√≥a m√¥ h√¨nh: {e}")
                else:
                    st.info("üìÅ Kh√¥ng c√≥ m√¥ h√¨nh n√†o ƒë·ªÉ x√≥a")
            else:
                st.info("üìÅ Th∆∞ m·ª•c models ch∆∞a t·ªìn t·∫°i")

else:
    # Landing page khi ch∆∞a c√≥ d·ªØ li·ªáu
    st.markdown("""
    <div style="background: linear-gradient(135deg, #fffaf0 0%, #fbd38d 100%); 
                border-left: 6px solid #d69e2e; border-radius: 16px; padding: 24px; margin: 2rem 0;">
        <div style="color: #b7791f; font-weight: 700; font-size: 1.2rem; margin-bottom: 12px;">
            ‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch
        </div>
        <div style="color: #b7791f; font-size: 1rem;">
            Vui l√≤ng t·∫£i d·ªØ li·ªáu t·ª´ sidebar ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng dashboard.
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng v·ªõi thi·∫øt k·∫ø chuy√™n nghi·ªáp
    st.markdown('<h2 class="section-header">üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Dashboard</h2>', unsafe_allow_html=True)
    
    # Workflow steps
    workflow_steps = [
        {
            "icon": "üìÅ",
            "title": "T·∫£i d·ªØ li·ªáu",
            "description": "Upload file CSV ho·∫∑c s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh t·ª´ sidebar",
            "color": "#3182ce"
        },
        {
            "icon": "üìä", 
            "title": "Ph√¢n t√≠ch d·ªØ li·ªáu",
            "description": "Xem bi·ªÉu ƒë·ªì, ch·ªâ b√°o k·ªπ thu·∫≠t v√† th·ªëng k√™ th·ªã tr∆∞·ªùng",
            "color": "#38a169"
        },
        {
            "icon": "‚öôÔ∏è",
            "title": "C·∫•u h√¨nh m√¥ h√¨nh",
            "description": "Thi·∫øt l·∫≠p tham s·ªë LSTM/GRU v√† ch·ªçn features",
            "color": "#d69e2e"
        },
        {
            "icon": "üß™",
            "title": "Hu·∫•n luy·ªán AI",
            "description": "Train m√¥ h√¨nh v·ªõi d·ªØ li·ªáu v√† ƒë√°nh gi√° hi·ªáu su·∫•t",
            "color": "#805ad5"
        },
        {
            "icon": "üìà",
            "title": "D·ª± ƒëo√°n t∆∞∆°ng lai",
            "description": "D·ª± ƒëo√°n gi√° c·ªï phi·∫øu v√† ph√¢n t√≠ch xu h∆∞·ªõng",
            "color": "#e53e3e"
        },
        {
            "icon": "üíæ",
            "title": "Qu·∫£n l√Ω m√¥ h√¨nh",
            "description": "L∆∞u, t·∫£i v√† qu·∫£n l√Ω c√°c m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán",
            "color": "#718096"
        }
    ]
    
    # Hi·ªÉn th·ªã workflow trong grid
    cols = st.columns(3)
    for i, step in enumerate(workflow_steps):
        with cols[i % 3]:
            st.markdown(f"""
            <div class="metric-card" style="text-align: center; min-height: 180px; display: flex; flex-direction: column; justify-content: center;">
                <div style="font-size: 2.5rem; margin-bottom: 12px;">{step['icon']}</div>
                <div style="font-weight: 700; font-size: 1.1rem; color: {step['color']}; margin-bottom: 8px;">
                    {step['title']}
                </div>
                <div style="color: #718096; font-size: 0.9rem; line-height: 1.4;">
                    {step['description']}
                </div>
            </div>
            """, unsafe_allow_html=True)
    
    # Technical requirements
    st.markdown('<h3 class="section-header">üìä Y√™u c·∫ßu ƒë·ªãnh d·∫°ng d·ªØ li·ªáu</h3>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="metric-card">
            <h4 style="color: #2d3748; margin-bottom: 16px; font-weight: 700;">üìã C·∫•u tr√∫c file CSV</h4>
            <div style="color: #4a5568; font-size: 0.9rem; line-height: 1.6;">
                File CSV c·∫ßn c√≥ c√°c c·ªôt b·∫Øt bu·ªôc:<br><br>
                ‚Ä¢ <strong>Date</strong>: Ng√†y giao d·ªãch (YYYY-MM-DD)<br>
                ‚Ä¢ <strong>Open</strong>: Gi√° m·ªü c·ª≠a<br>
                ‚Ä¢ <strong>High</strong>: Gi√° cao nh·∫•t<br>
                ‚Ä¢ <strong>Low</strong>: Gi√° th·∫•p nh·∫•t<br>
                ‚Ä¢ <strong>Close</strong>: Gi√° ƒë√≥ng c·ª≠a<br>
                ‚Ä¢ <strong>Volume</strong>: Kh·ªëi l∆∞·ª£ng giao d·ªãch
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="metric-card">
            <h4 style="color: #2d3748; margin-bottom: 16px; font-weight: 700;">‚ö° T√≠nh nƒÉng n√¢ng cao</h4>
            <div style="color: #4a5568; font-size: 0.9rem; line-height: 1.6;">
                Dashboard t·ª± ƒë·ªông t√≠nh to√°n:<br><br>
                ‚Ä¢ <strong>RSI</strong>: Relative Strength Index<br>
                ‚Ä¢ <strong>MACD</strong>: Moving Average Convergence Divergence<br>
                ‚Ä¢ <strong>MA</strong>: ƒê∆∞·ªùng trung b√¨nh ƒë·ªông 20/50 ng√†y<br>
                ‚Ä¢ <strong>Bollinger Bands</strong>: D·∫£i gi√° dao ƒë·ªông<br>
                ‚Ä¢ <strong>Volume Analysis</strong>: Ph√¢n t√≠ch kh·ªëi l∆∞·ª£ng<br>
                ‚Ä¢ <strong>Technical Indicators</strong>: C√°c ch·ªâ b√°o k·ªπ thu·∫≠t
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    # Sample data preview
    st.markdown('<h3 class="section-header">üëÄ V√≠ d·ª• d·ªØ li·ªáu m·∫´u</h3>', unsafe_allow_html=True)
    
    sample_data = {
        'Date': ['2025-01-01', '2025-01-02', '2025-01-03', '2025-01-04', '2025-01-05'],
        'Open': [1250.5, 1255.2, 1260.1, 1258.8, 1262.3],
        'High': [1268.4, 1272.1, 1275.6, 1271.2, 1278.9],
        'Low': [1248.1, 1251.8, 1257.3, 1255.4, 1259.7],
        'Close': [1265.8, 1269.5, 1271.2, 1268.1, 1275.4],
        'Volume': [125000000, 132000000, 118000000, 145000000, 139000000]
    }
    
    sample_df = pd.DataFrame(sample_data)
    st.dataframe(sample_df, use_container_width=True, hide_index=True)
    
    # Call to action
    st.markdown("""
    <div style="background: linear-gradient(135deg, #ebf8ff 0%, #bee3f8 100%); 
                border-radius: 16px; padding: 32px; text-align: center; margin: 2rem 0;">
        <div style="font-size: 1.5rem; font-weight: 700; color: #2c5aa0; margin-bottom: 12px;">
            üöÄ S·∫µn s√†ng b·∫Øt ƒë·∫ßu?
        </div>
        <div style="color: #2c5aa0; font-size: 1.1rem; margin-bottom: 16px;">
            T·∫£i d·ªØ li·ªáu l√™n t·ª´ sidebar ƒë·ªÉ kh√°m ph√° s·ª©c m·∫°nh c·ªßa AI trong d·ª± ƒëo√°n ch·ª©ng kho√°n!
        </div>
        <div style="font-size: 0.9rem; color: #4299e1;">
            üí° Tip: S·ª≠ d·ª•ng d·ªØ li·ªáu √≠t nh·∫•t 1 nƒÉm ƒë·ªÉ c√≥ k·∫øt qu·∫£ d·ª± ƒëo√°n t·ªët nh·∫•t
        </div>
    </div>
    """, unsafe_allow_html=True)

# Footer chuy√™n nghi·ªáp
st.markdown("""
<div class="footer">
    <div style="max-width: 1200px; margin: 0 auto; padding: 0 2rem;">
        <div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 1rem;">
            <div style="display: flex; align-items: center; gap: 0.5rem;">
                <span style="font-size: 1.2rem;">üìà</span>
                <span style="font-weight: 600; color: #2d3748;">VNIndex Prediction Dashboard</span>
            </div>
            <div style="font-size: 0.9rem; color: #718096;">
                Powered by <strong>Streamlit</strong> ‚Ä¢ <strong>TensorFlow</strong> ‚Ä¢ <strong>Plotly</strong>
            </div>
            <div style="font-size: 0.85rem; color: #a0aec0;">
                ¬© 2025 AI-Powered Financial Analytics
            </div>
        </div>
        <div style="text-align: center; margin-top: 1rem; padding-top: 1rem; border-top: 1px solid #e2e8f0; color: #a0aec0; font-size: 0.8rem;">
            ‚ö†Ô∏è Th√¥ng tin ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. Kh√¥ng ph·∫£i l·ªùi khuy√™n ƒë·∫ßu t∆∞.
        </div>
    </div>
</div>
""", unsafe_allow_html=True)
